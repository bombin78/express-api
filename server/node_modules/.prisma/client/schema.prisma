// Prisma => Get Started / Set up Prisma ORM / Start from scratch: 
// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-node-mongodb
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// @default(auto())/@default(now()) - задание дефолтного значения
// @map("_id") - говорим, что нужно сопоставить id с _id (с тем,
// как он прописывается в mongodb) и задал ему ... @db.ObjectId
// @unique - уникальное значение
// ? - необязательное поле
// Post[] - массив связей в модели Post
// @relation('following') - 
model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  name        String?
  avatarUrl   String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bio         String?
  location    String?
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}
